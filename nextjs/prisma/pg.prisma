// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Music {
    id          Int           @id @default(autoincrement())
    mid         String        @unique @db.VarChar(50)
    sourceId    Int
    name        String        @db.VarChar(50)
    albumId     Int?
    lyricId     Int?
    size        Int           @db.Integer
    filePath    String?       @db.VarChar(100)
    createdAt   DateTime      @default(now())
    Favorite    Favorite?
    MusicArtist MusicArtist[]
    Album       Album?        @relation(fields: [albumId], references: [id])
    Lyric       Lyric?        @relation(fields: [lyricId], references: [id])

    @@unique([mid, sourceId])
}

model Lyric {
    id    Int     @id @default(autoincrement())
    lyric String  @db.Text
    Music Music[]
}

model Singer {
    id          Int           @id @default(autoincrement())
    name        String        @unique @db.VarChar(50)
    picture     String?       @db.VarChar(200)
    MusicArtist MusicArtist[]
    Album       Album[]
}

model MusicArtist {
    id       Int    @id @default(autoincrement())
    musicId  Int
    singerId Int
    Music    Music  @relation(fields: [musicId], references: [id])
    Singer   Singer @relation(fields: [singerId], references: [id])

    @@unique([musicId, singerId])
}

model Album {
    id       Int     @id @default(autoincrement())
    singerId Int
    name     String  @db.VarChar(50)
    coverId  Int?
    Singer   Singer  @relation(fields: [singerId], references: [id])
    Cover    Cover?  @relation(fields: [coverId], references: [id])
    Music    Music[]

    @@unique([singerId, name])
}

model Cover {
    id       Int     @id @default(autoincrement())
    url      String  @db.VarChar(50)
    filePath String? @db.VarChar(100)
    Album    Album[]
}

model Favorite {
    id      Int   @id @default(autoincrement())
    musicId Int   @unique
    music   Music @relation(fields: [musicId], references: [id])
}

model Job {
    id     Int       @id @default(autoincrement())
    params String    @db.VarChar(1024)
    status JobStatus @default(Pending)
}

enum JobStatus {
    Pending
    Running
    Failed
    Done
}
